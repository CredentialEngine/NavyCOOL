<?xml version="1.0" encoding="utf-8"?>
<configuration>
	<configSections>
	
	<section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
	<!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 --></configSections>
	<startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
    </startup>
	<appSettings>
		<add key="domainName" value="https://localhost:44315/" />
		<!--<add key="domainName" value="https://credentialengine.org/publisher/"/>-->
		<!-- doing one or the other of these two-->
		<add key="doingBatchRegistrations" value="true" />

		<add key="enforcingProcessProfileMinimumData" value="true" />
		<!-- this should be true for production -->
		<add key="requireQAOrgForQAQRoles" value="false" />
		<!-- use the admin account for production, ensure has proper roles-->
		<add key="defaultUserIdForPublishing" value="10" />
		<!-- CR related ======================================= -->
		<add key="forceCtidToLowerCase" value="true" />
		<add key="includeHasPartIsPartWithConnections" value="false" />
		<add key="doingLinkChecking" value="false" />

		<add key="enforcingMinimumDataChecksOnPublish" value="true" />
		<add key="orgReferencesRequireOrgType" value="true" />
		<add key="usingQuantitiveValue" value="true" />
		<add key="maxNameLength" value="300" />

		<add key="envType" value="development" />

		<!-- keys used in editor ================================== -->
		<add key="maxReferenceTextLength" value="1000" />
		<add key="maxReferenceUrlLength" value="800" />
		<add key="minDescriptionTextLength" value="25" />

		<add key="registryAssistantApiVersion" value="" />
		<!-- local-->
		<!--<add key="registryAssistantApi" value="http://localhost:5707/" />-->
		<!--cassExportUrl Url is an MD5 generated string from resource URL -->
		<!--cassResourceUrlPrefix - this can be eliminated, once fully using editorUri -->


		<add key="CASSDomainsForCORS" value="cassproject.github.io,dev.cassproject.org,cass.credentialengine.org" />

		<!-- sandbox -->
		<!-- api key for manual publisher site ** ADD APIKEY
	sandbox -->
		<add key="apiPublisherIdentifier" value="87d65593-1282-4b08-a2f9-f50b9f254c8a" />

		<add key="CEAccountOrganizationByCTID" value="https://sandbox.credentialengine.org/accountsApi/Organization/GetByCTID?ctid={0}&amp;password={1}" />

		<add key="registryAssistantApi" value="https://sandbox.credentialengine.org/assistant/" />
		<add key="registryAssistantApi" value="https://sandbox.credentialengine.org/assistant/" />


		<add key="credentialRegistryUrl" value="https://sandbox.credentialengineregistry.org" />
		<add key="credentialRegistryGet" value="https://sandbox.credentialengineregistry.org/ce-registry/envelopes/{0}" />
		<add key="credentialRegistrySearch" value="https://sandbox.credentialengineregistry.org/ce-registry/search?" />
		<add key="credRegistryResourceUrl" value="https://sandbox.credentialengineregistry.org/resources/" />
		<add key="credRegistryGraphUrl" value="https://sandbox.credentialengineregistry.org/graph/" />


		<!-- staging
	  <add key="registryAssistantApi" value="http://staging.credentialengine.org/assistant/" />
	  <add key="cassExportUrl" value="https://dev.cassproject.org/api/ceasn/{0}" />
	  
	      <add key="credentialRegistryUrl" value="https://staging.credentialengineregistry.org" />
    <add key="credentialRegistryGet" value="https://staging.credentialengineregistry.org/ce-registry/envelopes/{0}" />
    <add key="credentialRegistrySearch" value="https://staging.credentialengineregistry.org/ce-registry/search?" />
    <add key="credRegistryResourceUrl" value="https://staging.credentialengineregistry.org/resources/" />
    
    <add key="credRegistryGraphUrl" value="https://staging.credentialengineregistry.org/graph/" />
	  -->


		<add key="usingRegistryAssistantForMapping" value="true" />
		<!-- this is only a conveniece for testing, and is normally false. Actually in the case of the editor, the Urls have already been validated -->
		<add key="ra.SkippingLinkChecking" value="true" />
		<add key="treatingRemoteFileNotExistingAsError" value="false" />
		<!-- If true costs from editor are flattened to the RA inpout, otherwise hierarchy -->
		<add key="mapEditorCostsFlattenedCosts" value="false" />
		<add key="orgReferencesRequireOrgType" value="true" />
		<add key="enforcingFoundingDateFormats" value="false" />
		<!-- where true, name, swp, and desc will be included along with @id
	USEFUL TO PROVIDE Hydrated entities in the payload - but results in bulky input docs. -->
		<add key="includeMinDataWithReferenceId" value="false" />
		<!-- competencies related ======================================= -->
		<add key="usingCassBasedCompetencies" value="true" />
		<add key="publishingUsingCassBasedCompetencies" value="true" />

		<!-- batch options =========================================== -->
		<add key="payloadFilePrefix" value="" />
		<add key="defaultCommunity" value="ce_registry" />
		<add key="requestedCommunity" value="navy" />
		<!-- if true, will format top level URIs as /graph.
    19-09-02 - apparently we should always use the resource url when referencing from other resources. It might be better to always have the API format the URI.-->
		<add key="usingGraphDocuments" value="false" />
		<add key="apiFormattingRegistryUrisAsCTID" value="true" />
		<!-- id_lowest-->
		<add key="defaultOrderBy" value="newest" />

		<!--== ********** overrides to do format step for all types ********** ==-->
		<!--========================================================= -->
		<add key="credDoingPublish" value="true" />
		<add key="credDoingPublishAsync" value="false" />
		<add key="credDeleteBeforePublish" value="false" />
		<add key="credDoingGenerate" value="false" />
		<add key="credProcessCount" value="2" />
		<!-- 
      latest:		use literal:latestFilter;  sort by desc; 
      published:	use literal:latestFilterPublished;  sort by desc; 
      custom:		use related SQL; 
      list:			use list appKey (ex. credIdList)
	  testCases:	use credSql2 (ex)
      -->
		<add key="credPublishSource" value="custom" />
		<add key="credOrderBy" value="id_lowest" />
		<!-- already published 
	< 2731
	> 2730 and < 4288
	> 4287 and < 5718
	> 5716
	
	-->
		<add key="credSql_1" value=" ( base.Id in ( select Id FROM [ctdlEditor].[dbo].[Credential_Summary] where [OwningOrganizationId] = 1319 and IsPublished = 'yes' and CredentialTypeSchema = 'ceterms:AssociateDegree' and statusid = 2 )  ) " />

		<add key="credSql" value=" (StatusId &lt; 4 AND len(IsNull(CredentialRegistryId,'')) = 36  ) " />

		<!-- already published and not published recently-->
		<add key="credSql_pubNrecent" value=" (StatusId &lt; 4 AND len(IsNull(CredentialRegistryId,'')) = 36) and    base.id in ( Select a.EntityBaseId from Entity a inner join Credential_Updated_Approval_Publish_Summary c on a.EntityUid = c.RowId where a.EntityTypeId = 1 AND convert(varchar(10),c.LastPublishDate,120) &lt; '2019-08-19' ) " />

		<!-- NOT published 
	<add key="credSql" value=" (StatusId &lt; 4 AND len(IsNull(base.CTID,'')) = 39 AND IsNull(CredentialRegistryId,'') = '') " />
-->
		<!-- already published with credit hours converted to units-->
		<!-- use System.PendingRepublish -->
		<add key="credSql_pp" value=" (( base.Id in (SELECT [EntityBaseId]  FROM [dbo].[System.PendingRepublish] where [IsRepublished]= 0 and [EntityTypeId] = 1)) AND StatusId &lt; 4 AND Len(IsNull(CredentialRegistryId,'')) = 36) " />
		<!-- prod rerun issues
    <add key="credSql" value=" ( base.Id in (6,9,10,17,18,19, 1141, 1151,1235, 1247, 1376, 1414)" />
	-->

		<!-- never published-->
		<add key="credSql5" value="(StatusId &lt; 4 AND IsNull(CredentialRegistryId,'') = ''   and convert(varchar(10),LastUpdated,120) &lt; '2017-05-01' )" />
		<!-- using a list of ids: , 6,67, 1,1208-->
		<add key="credIdList" value="6,9,17,18,19" />
		<!-- subset of test cases: -->
		<add key="credIdListTESTS" value="1, 6, 9, 67, 83, 1135, 1139, 1141, 1167, 1179, 1190, 1208, 1216, 1218, 1220" />
		<add key="credDoingDelete" value="false" />
		<!-- delete all published-->
		<add key="credDeleteSql" value=" Len(IsNull(CredentialRegistryId,'')) = 36 " />
		<!--======================================================================= -->
		<add key="orgDoingPublish" value="true" />
		<add key="orgDeleteBeforePublish" value="false" />
		<add key="orgDoingGenerate" value="false" />
		<add key="orgProcessCount" value="2" />
		<add key="orgPublishSource" value="custom" />
		<add key="orgOrderBy" value="id_lowest" />

		<!-- NOT published 
	<add key="orgSql1" value=" (StatusId &lt; 4 AND IsNull(base.CredentialRegistryId,'') = '') " />
	  -->
		<!-- already published with QA role(s) 
	  <add key="orgSql" value=" (StatusId &lt; 4 AND len(IsNull(base.CredentialRegistryId,'')) = 36  ) AND base.Id in (SELECT EntityBaseId   FROM [dbo].[Entity.AgentRelationship_Totals] where [EntityTypeId] = 2 and  [QaCount]> 0) " />  
	  -->
		<!-- already published -->
		<add key="orgSql" value=" (StatusId &lt; 4 AND len(IsNull(base.CredentialRegistryId,'')) = 36  ) " />

		<!-- use System.PendingRepublish -->
		<add key="orgSql_pend" value=" (( base.Id in (SELECT [EntityBaseId]  FROM [dbo].[System.PendingRepublish] where [IsRepublished]= 0 and [EntityTypeId] = 2)) AND StatusId &lt; 4 AND Len(IsNull(CredentialRegistryId,'')) = 36) " />
		<!-- test cases 
    <add key="orgSql3" value=" ( base.Id in (SELECT [EntityBaseId] FROM [Test.Testcases] where [EntityTypeId] = 2) ) " />
  
    <add key="orgSql4" value=" (StatusId &lt; 4 AND len(IsNull(base.CredentialRegistryId,'')) = 36 ) And (base.Id in ( SELECT [ActivityObjectId] FROM [dbo].[Activity_MetadataRegistrySummary] where [ActivityType]= 'Organization' group by [ActivityObjectId] having max([CreatedDate]) &lt; '2017-07-11' )) " />
	  -->
		<!-- rerun prod cases -->
		<add key="orgIdList" value="40" />
		<add key="orgIdList2" value="6,1079,1080,1168" />

		<!--================================================ ========================================== -->
		<add key="asmtDoingPublish" value="true" />
		<add key="asmtDeleteBeforePublish" value="false" />
		<add key="asmtDoingGenerate" value="false" />
		<add key="asmtProcessCount" value="2" />
		<add key="asmtPublishSource" value="custom" />
		<add key="asmtOrderBy" value="id_lowest" />

		<!-- NOT published -->
		<add key="asmtSql1" value=" (StatusId &lt; 4 AND IsNull(CredentialRegistryId,'') = '') " />
		<!-- already published -->
		<add key="asmtSql" value=" (StatusId &lt; 4 AND len(IsNull(CredentialRegistryId,'')) = 36  ) " />
		<!-- already published with credit hours converted to units-->
		<add key="asmtSql_cred" value=" (StatusId &lt; 4 AND len(IsNull(CredentialRegistryId,'')) = 36  AND [CreditHourValue] &gt; 0) and base.id in (select id from [Assessment_Updated_Approval_Publish_Summary] where convert(varchar(10),LastPublishDate, 120) &lt; '2019-05-16') " />
		<!-- use System.PendingRepublish -->
		<add key="asmtSql_pending" value=" (( base.Id in (SELECT [EntityBaseId]  FROM [dbo].[System.PendingRepublish] where [IsRepublished]= 0 and [EntityTypeId] = 3)) AND StatusId &lt; 4 AND Len(IsNull(CredentialRegistryId,'')) = 36) " />
		<!-- already published and has competencies-->
		<add key="asmtSql_c" value=" ([IsPublished]= 'yes' and isnull(HasCompetencyCount,0) &gt; 0) " />
		<add key="asmtSql3" value=" ( base.Id in (SELECT [EntityBaseId] FROM [Test.Testcases] where [EntityTypeId] = 3) ) " />

		<add key="asmtSql4" value=" (StatusId &lt; 4 AND len(IsNull(CredentialRegistryId,'')) = 36 ) And (base.Id in ( SELECT [ActivityObjectId] FROM [dbo].[Activity_MetadataRegistrySummary] where [ActivityType]= 'Assessment' group by [ActivityObjectId] having max([CreatedDate]) &lt; '2017-07-11' )) " />
		<add key="asmtIdList" value="2154, 2137, 2201, 2100, 2124,2179,2181" />


		<!-- ACCOUNT/CONTACT US NOTIFICATION ====================================================== -->
		<add key="logAllEmail" value="yes" />
		<add key="notifyOnException" value="yes" />
		<!-- EmailService: smtp, serviceApi, mailgun -->
		<add key="emailService" value="mailgun" />
		<add key="MailgunSendingDomainName" value="credentialengine.org" />
		<add key="MailgunSecretAPIKey" value="" />
		<add key="MailgunPublicAPIKey" value="" />
		<!-- use web service, and ignore others TEMP UNTIL OUR OWN IS SET UP-->
		<add key="SendEmailService" value="" />
		<add key="SmtpHost" value="localhost" />
		<!-- sendEmailFlag - use TRUE uppercase to set on -->
		<add key="sendEmailFlag" value="TRUE" />
		<add key="usingTempOverrideEmail" value="yes" />
		<add key="contactUsMailTo" value="mparsons@credentialengine.org" />
		<add key="contactUsMailFrom" value="DoNotReply@credentialengine.org" />
		<add key="systemAdminEmail" value="mparsons@credentialengine.org" />
		
		<!--<add key="systemNotifyFromEmail" value="NavyCOOLPublish@credentialengine.org" />-->
		<add key="systemNotifyFromEmail" value="NavyCOOLPublish@credentialengine.org" />
		<!-- LOG SETTINGS ========================================================================
      Notes:
        - Be sure to give write access to the everyone role for the following log file
    -->
		<add key="logErrors" value="yes" />
		<!--<add key="isDebug" value="TRUE" />-->
		<add key="appTraceLevel" value="6" />
		<!-- work-->
		<add key="path.error.log" value="C:\@logs\[date]_BatchRegister_ErrorLog.txt" />
		<add key="path.email.log" value="C:\@logs\[date]_BatchRegister_EmailLog.txt" />
		<add key="path.trace.log" value="C:\@logs\[date]_BatchRegister_TraceLog.txt" />
		<add key="path.log.file" value="C:\@logs\payload\[date]_[filename].json" />
		<add key="ClientSettingsProvider.ServiceUri" value="" />
	</appSettings>
	<connectionStrings>
		<!-- local add datasouce(s) for retrieving NavyCOOL data -->
		<add name="DefaultConnection" connectionString="Server=(local);database=????????;User Id=admin;password=????????;Pooling=true;Min Pool Size=10;Max Pool Size=50;Connect Timeout=200" providerName="System.Data.SqlClient" />




		<!-- production 
   
   -->


	</connectionStrings>
	<entityFramework>
		<defaultConnectionFactory type="System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework" />
		<providers>
			<provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
		</providers>
	</entityFramework>	
</configuration>
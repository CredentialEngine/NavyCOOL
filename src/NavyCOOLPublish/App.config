<?xml version="1.0" encoding="utf-8"?>
<configuration>
	<configSections>
		<section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
	</configSections>
	<startup>
		<supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
	</startup>
	<appSettings>
		<add key="envType" value="development" />
		<add key="domainName" value="https://localhost:44315/" />
		<!--<add key="domainName" value="https://credentialengine.org/publisher/"/>-->

		<!-- CR related ======================================= -->
		<add key="forceCtidToLowerCase" value="true" />

		<!-- consider a step to ensure minimum data exists before publishing -->
		<add key="enforcingMinimumDataChecksOnPublish" value="true" />

		<!-- keys used in editor ================================== -->
		<!-- API has a minimum length for descriptions. Could do checks before call to the API-->
		<add key="minDescriptionTextLength" value="25" />

		<!-- select the API for the target environment -->
		<!-- sandbox -->
		<add key="registryAssistantApi" value="https://sandbox.credentialengine.org/assistant/" />
		<add key="ourApiKey" value="##### ADD YOUR API KEY FOR ENV ####" />

		<!-- staging 
		<add key="registryAssistantApi" value="https://staging.credentialengine.org/assistant/" />
		<add key="ourApiKey" value="##### ADD YOUR API KEY FOR ENV ####" />
-->
		<!-- batch options =========================================== -->
		<add key="payloadFilePrefix" value="" />
		<add key="defaultCommunity" value="ce-registry" />
		<!-- set to blank to use the default community -->
		<add key="requestedCommunity" value="navy" />
		<add key="apiFormattingRegistryUrisAsCTID" value="true" />
		
		<!-- ===== Section Filters ==================================================-->
		
		<!-- id_lowest-->
		<add key="defaultOrderBy" value="newest" />

		<!--== ********** overrides to do format step for all types ********** ==-->
		<!--========================================================= -->
		<add key="credDoingPublish" value="false" />
		<add key="credDeleteBeforePublish" value="false" />
		<add key="credDoingGenerate" value="false" />
		<add key="credProcessCount" value="10" />
		<!-- 
      latest:		use literal:latestFilter;  sort by desc; 
      published:	use literal:latestFilterPublished;  sort by desc; 
      custom:		use related SQL; 
      list:			use list appKey (ex. credIdList)
	  testCases:	use credSql2 (ex)
      -->
		<add key="credPublishSource" value="custom" />
		<add key="credOrderBy" value="id_lowest" />

		<!-- set the default filter - keft empty for now -->
		<add key="credSql" value="" />


		<!-- already published with credit hours converted to units-->
		<!-- use System.PendingRepublish -->
		<add key="credSql_pp" value=" (( base.Id in (SELECT [EntityBaseId]  FROM [dbo].[System.PendingRepublish] where [IsRepublished]= 0 and [EntityTypeId] = 1)) AND StatusId &lt; 4 AND Len(IsNull(CredentialRegistryId,'')) = 36) " />
		<!-- prod rerun issues
    <add key="credSql" value=" ( base.Id in (6,9,10,17,18,19, 1141, 1151,1235, 1247, 1376, 1414)" />
	-->


		<!-- using a list of ids: , 6,67, 1,1208-->
		<add key="credIdList" value="6,9,17,18,19" />

		<add key="credDoingDelete" value="false" />
		<!-- delete all published-->
		<add key="credDeleteSql" value=" Len(IsNull(CredentialRegistryId,'')) = 36 " />
		
		<!--======================================================================= -->
		<add key="orgDoingPublish" value="false" />
		<add key="orgDeleteBeforePublish" value="false" />
		<add key="orgDoingGenerate" value="false" />
		<add key="orgProcessCount" value="2" />
		<add key="orgPublishSource" value="custom" />
		<add key="orgOrderBy" value="id_lowest" />

		<!-- default. If using, add a filter that will select only the agencies to publish/republish -->
		<add key="orgSql" value="" />

		<!-- rerun prod cases -->
		<add key="orgIdList" value="40" />
		<add key="orgIdList2" value="6,1079,1080,1168" />

		<!--================================================ ========================================== -->
		<add key="asmtDoingPublish" value="true" />
		<add key="asmtDeleteBeforePublish" value="false" />
		<add key="asmtDoingGenerate" value="false" />
		<add key="asmtProcessCount" value="2" />
		<add key="asmtPublishSource" value="custom" />
		<add key="asmtOrderBy" value="id_lowest" />

		<!-- default. If using, add a filter that will select only the agencies to publish/republish -->
		<add key="asmtSql" value="" />
		<add key="asmtIdList" value="2154, 2137, 2201, 2100, 2124,2179,2181" />


		<!-- ACCOUNT/CONTACT US NOTIFICATION ====================================================== -->
		<add key="logAllEmail" value="yes" />
		<add key="notifyOnException" value="yes" />
		<!-- EmailService: smtp, serviceApi, mailgun -->
		<add key="emailService" value="mailgun" />
		<add key="MailgunSendingDomainName" value="credentialengine.org" />
		<add key="MailgunSecretAPIKey" value="" />
		<add key="MailgunPublicAPIKey" value="" />
		<!-- use web service, and ignore others TEMP UNTIL OUR OWN IS SET UP-->
		<add key="SendEmailService" value="" />
		<add key="SmtpHost" value="localhost" />
		<!-- sendEmailFlag - use TRUE uppercase to set on -->
		<add key="sendEmailFlag" value="TRUE" />
		<add key="usingTempOverrideEmail" value="yes" />
		<add key="contactUsMailTo" value="mparsons@credentialengine.org" />
		<add key="contactUsMailFrom" value="DoNotReply@credentialengine.org" />
		<add key="systemAdminEmail" value="mparsons@credentialengine.org" />

		<add key="systemNotifyFromEmail" value="NavyCOOLPublish@credentialengine.org" />
		<!-- LOG SETTINGS ========================================================================
      Notes:
        - Be sure to give write access to the everyone role for the following log file
    -->
		<add key="logErrors" value="yes" />
		<!--<add key="isDebug" value="TRUE" />-->
		<add key="appTraceLevel" value="5" />
		<!-- work-->
		<add key="path.error.log" value="C:\@logs\[date]_BatchRegister_ErrorLog.txt" />
		<add key="path.email.log" value="C:\@logs\[date]_BatchRegister_EmailLog.txt" />
		<add key="path.trace.log" value="C:\@logs\[date]_BatchRegister_TraceLog.txt" />
		<add key="path.log.file" value="C:\@logs\payload\[date]_[filename].json" />
		<add key="ClientSettingsProvider.ServiceUri" value="" />
	</appSettings>
	<connectionStrings>
		<!-- local add datasouce(s) for retrieving NavyCOOL data -->
		<add name="DefaultConnection" connectionString="Server=(local);database=????????;User Id=admin;password=????????;Pooling=true;Min Pool Size=10;Max Pool Size=50;Connect Timeout=200" providerName="System.Data.SqlClient" />

	</connectionStrings>
	<entityFramework>
		<defaultConnectionFactory type="System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework" />
		<providers>
			<provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
		</providers>
	</entityFramework>
</configuration>